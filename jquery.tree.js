//(function($){	$.fn.tree = function(options) {		console.info('TREE');		if(this.length==0)return;		//		var _this = this;		this.options = $.extend({debug:false, cssNode:'Expand'}, options);		if(this.options.debug)console.debug('TREE',$(this),'options',this.options);		//$.cookie(this.options.id, '');		//		$(this).click( function(event){ _this.onClick(event); });		//		this.expandAll = function() {			if(this.options.debug)console.info('TREE.expandAll');			var nodes = $(this).find('li.Node');			console.info(nodes);			for(var j=0,l=nodes.length;j<l;j++){				var node = $(nodes[j]);				if(node.hasClass('ExpandClosed')){					if(url = node.attr('data')){						url = url.split('|');// загрузить узел						this.loadNode(node, url[0], url[1]);					}else{						node.addClass('ExpandOpen').removeClass('ExpandClosed');					}				}			}		}		this.onClick = function(event){			var target = $(event.target);			//			if(!target.hasClass(this.options.cssNode))return; // клик не на узле			// 			var node = target.parent(); // Узел на который кликнули			if(node.hasClass('ExpandLeaf'))return; // клик на листе			//			if(node.find('li').length){				this.toggleNode(node); // Если есть потомки то уже был загружен				return;			}			if(data = node.attr('data').split('|')){// загрузить узел				this.loadNode(node, data[0], data[1]);			}		}		this.toggleNode = function(node) {			if(node.hasClass('ExpandOpen'))node.addClass('ExpandClosed').removeClass('ExpandOpen');			else node.addClass('ExpandOpen').removeClass('ExpandClosed');			this.saveCookie(node);		}		this.findRoot = function(node) {			var cookie = '';			while(node.length != 0 && node.attr('id') != this.options.id){				cookie = node.index()+(cookie?'_'+cookie:'');				node = node.parent().parent();			}			if(this.options.debug)console.info('TREE.findRoot=',cookie);			return cookie;		}		this.loadCookie = function() {			if(this.options.id){				if(data = $.cookie(this.options.id)){					if(this.options.debug)console.info('TREE.loadCookie[',this.options.id,']=',data);					var arr = data.split('|');					for(var i=0,c=arr.length;i<c;i++){						var idx = arr[i].split('_');						var node = $(this);						for(var j=0,l=idx.length-1;j<=l;j++){							node = $(node.find('ul').get(0));							node = $(node.children('li').get(idx[j]));							//							if(j==l){								if(node.hasClass('ExpandClosed')){									if(this.options.debug)console.debug('Expand',arr[i],'=',node);									if(url = node.attr('data')){										url = url.split('|');// загрузить узел										this.loadNode(node, url[0], url[1]);									}else{										node.addClass('ExpandOpen').removeClass('ExpandClosed');									}								}							}						}					}				}			}		}		this.saveCookie = function(node) {			if(this.options.id){				if(cookie = this.findRoot(node)){					//					var data = $.cookie(this.options.id);					var arr = [];					if(data){ arr = data.split('|'); arr.remove(cookie); }					if(!node.hasClass('ExpandClosed')) arr.push(cookie);					data = arr.join('|');					//					if(this.options.debug)console.info('TREE.saveCookie',this.options.id,'=',data);					$.cookie(this.options.id, data);				}			}		}		this.loadNode = function(node, url, type, cookie) {			if(typeof type === 'undefined')type = 'json';			if(typeof cookie === 'undefined')cookie = false;			if(typeof url === 'undefined')return;			function showLoading(on) {				var el = $(node.children()[0]);				el.toggleClass('ExpandLoading', on);			}			function onLoadError(error) {				var el = $(node.children()[0]);				el.addClass('ExpandError');			}			function onLoaded(data) {				function onHTML(data) {					var html = [];					for(var i=0,c=data.length-1; i<=c; i++) {						var child = data[i];						//if(_this.options.debug)console.info('onLoaded', i, ' = ', child);						html.push('<li class="Node Expand',(child.folder ? 'Closed' : 'Leaf'));						if(i == c)html.push(' IsLast');						if(child.css)html.push(' ',child.css);						html.push('"');						if(child.id)html.push(' id="',child.id,'"');						if(child.folder && child.load){							if(child.type)html.push(' datatype="',child.type,'"');							html.push(' data="',child.load,'"');						}						html.push('>');						html.push('<div class="Expand"></div>');						if(child.icon)html.push('<div class="Icon ',child.icon,'"></div>');						html.push('<div class="Content">',child.text,'</div>');						if (child.folder) {							html.push('<ul class="Container">');							if(child.children && child.children.length) {								html.push(onHTML(child.children));							}							html.push('</ul>');						}						html.push('</li>');					}					return html.join('');				}				//				var el = $(node.find('ul')[0]);				var html = '';				if(type=='json') html = onHTML(data); else html = data;				//if(_this.options.debug)console.log('loadNode', el, ' HTML = ', html);				el.html(html);				//				_this.toggleNode(node);				if(cookie)_this.loadCookie();			}			if(this.options.debug)console.info('TREE.loadNode ', node, ' | ', url);			//			showLoading(true);			$.ajax({				url: url,				dataType:type,				success: function(data) {					//if(_this.options.debug)console.info('$.ajax onSuccess', data);					if(!data.errcode) {						onLoaded(data);						showLoading(false);					} else {						showLoading(false);						onLoadError(data)					}				},				error: function(xhr, status) {					//if(_this.options.debug)console.info('$.ajax onError', xhr, ' | ', status);					showLoading(false)					var errinfo = { errcode: status }					if (xhr.status != 200) {						errinfo.message = xhr.statusText					} else {						// может быть статус 200, а ошибка из-за некорректного JSON						errinfo.message = 'Некорректные данные с сервера'					}					onLoadError(errinfo)				},				cache: false			})		}		//		if(this.options.load){			var node = $(this);			if(url = (this.options.load).split('|')){// загрузить узел				this.loadNode(node, url[0], url[1], true);			}		}	}})(jQuery);//